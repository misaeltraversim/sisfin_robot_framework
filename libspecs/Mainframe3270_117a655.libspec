<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="Mainframe3270" type="library" format="ROBOT" generated="20200406 21:33:56">
<version>2.1</version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>Mainframe3270 is a library for Robot Framework based on [https://pypi.org/project/py3270/|py3270 project],
a Python interface to x3270, an IBM 3270 terminal emulator. It provides an API to a x3270 or s3270 subprocess.

Notes:

By default the import set the visible argument to true, on this option the py3270 is running the wc3270.exe,
but is you set the visible to false, the py3270 will run the ws3270.exe.

Example:

| ***** Settings *****
| Library           Mainframe3270
|
| ***** Test Cases *****
| Example
|     Open Connection    Hostname    LUname
|     Change Wait Time    0.9
|     Set Screenshot Folder    C:\\Temp\\IMG
|     ${value}    Read    3    10    17
|     Page Should Contain String    ENTER APPLICATION
|     Write Bare    applicationname
|     Send Enter
|     Take Screenshot
|     Close Connection</doc>
<init>
<arguments>
<arg>visible=False</arg>
<arg>timeout=30</arg>
<arg>wait_time=0.20</arg>
<arg>img_folder=.</arg>
</arguments>
<doc>You can change to hide the emulator screen set the argument visible=${False}

For change the wait_time see `Change Wait Time`, to change the img_folder
see the `Set Screenshot Folder` and to change the timeout see the `Change Timeout` keyword.</doc>
<tags>
</tags>
</init>
<kw name="Attach Screenshot List">
<arguments>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Change Timeout">
<arguments>
<arg>seconds</arg>
</arguments>
<doc>Change the timeout for connection in seconds.</doc>
<tags>
</tags>
</kw>
<kw name="Change Wait Time">
<arguments>
<arg>wait_time</arg>
</arguments>
<doc>To give time for the mainframe screen to be "drawn" and receive the 
next commands, a "wait time" has been created which by default is set to
0.5 seconds. This is a sleep applied after the follow keywords:

`Execute Command`
`Send Enter`
`Send PF`
`Write`
`Write in position`

If you want to change this value just use this keyword passing the time in seconds.

Examples:
    | Change Wait Time | 0.5 |
    | Change Wait Time | 2 |</doc>
<tags>
</tags>
</kw>
<kw name="Close Connection">
<arguments>
</arguments>
<doc>Disconnect from the host.</doc>
<tags>
</tags>
</kw>
<kw name="Debug Screenshot List">
<arguments>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Delete Char">
<arguments>
<arg>ypos=None</arg>
<arg>xpos=None</arg>
</arguments>
<doc>Delete character under cursor. If you want to delete a character that is in
another position, simply pass the coordinates "ypos"/"xpos".

Co-ordinates are 1 based, as listed in the status area of the
terminal.

Examples:
    | Delete Char |
    | Delete Char | ypos=9 | xpos=25 |</doc>
<tags>
</tags>
</kw>
<kw name="Delete Field">
<arguments>
<arg>ypos=None</arg>
<arg>xpos=None</arg>
</arguments>
<doc>Delete a entire contents in field at current cursor location and positions
cursor at beginning of field. If you want to delete a field that is in
another position, simply pass the coordinates "ypos"/"xpos" of any part of the field.

Co-ordinates are 1 based, as listed in the status area of the
terminal.

Examples:
    | Delete Field |
    | Delete Field | ypos=12 | xpos=6 |</doc>
<tags>
</tags>
</kw>
<kw name="Execute Command">
<arguments>
<arg>cmd</arg>
</arguments>
<doc>Execute an [http://x3270.bgp.nu/wc3270-man.html#Actions|x3270 command].

Examples:
    | Execute Command | Enter |
    | Execute Command | Home |
    | Execute Command | Tab |
    | Execute Command | PF(1) |</doc>
<tags>
</tags>
</kw>
<kw name="Move Next Field">
<arguments>
</arguments>
<doc>Move the cursor to the next input field. Equivalent to pressing the Tab key.</doc>
<tags>
</tags>
</kw>
<kw name="Move Previous Field">
<arguments>
</arguments>
<doc>Move the cursor to the previous input field. Equivalent to pressing the Shift+Tab keys.</doc>
<tags>
</tags>
</kw>
<kw name="Open Connection">
<arguments>
<arg>host</arg>
<arg>LU=None</arg>
<arg>port=23</arg>
</arguments>
<doc>Create a connection with IBM3270 mainframe with the default port 23. To make a connection with the mainframe
you only must inform the Host. You can pass the Logical Unit Name and the Port as opcional.

Example:
    | Open Connection | Hostname |
    | Open Connection | Hostname | LU=LUname |
    | Open Connection | Hostname | port=992 |</doc>
<tags>
</tags>
</kw>
<kw name="Page Should Contain All Strings">
<arguments>
<arg>list_string</arg>
<arg>ignore_case=False</arg>
<arg>error_message=None</arg>
</arguments>
<doc>Search if all of the strings in a given list exists on the mainframe screen.

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True}
and you can edit the raise exception message with error_message.

Example:
    | Page Should Contain All Strings | ${list_of_string} |
    | Page Should Contain All Strings | ${list_of_string} | ignore_case=${True} |
    | Page Should Contain All Strings | ${list_of_string} | error_message=New error message |</doc>
<tags>
</tags>
</kw>
<kw name="Page Should Contain Any String">
<arguments>
<arg>list_string</arg>
<arg>ignore_case=False</arg>
<arg>error_message=None</arg>
</arguments>
<doc>Search if one of the strings in a given list exists on the mainframe screen.

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True}
and you can edit the raise exception message with error_message.

Example:
    | Page Should Contain Any String | ${list_of_string} |
    | Page Should Contain Any String | ${list_of_string} | ignore_case=${True} |
    | Page Should Contain Any String | ${list_of_string} | error_message=New error message |</doc>
<tags>
</tags>
</kw>
<kw name="Page Should Contain Match">
<arguments>
<arg>txt</arg>
<arg>ignore_case=False</arg>
<arg>error_message=None</arg>
</arguments>
<doc>Fails unless the given string matches the given pattern.

Pattern matching is similar as matching files in a shell, and it is always case-sensitive.
In the pattern, * matches to anything and ? matches to any single character.

Note that the entire screen is only considered a string for this keyword, so if you want to search
for the string "something" and it is somewhere other than at the beginning or end of the screen it
should be reported as follows: **something**

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True} and you
can edit the raise exception message with error_message.

Example:
    | Page Should Contain Match | **something** |
    | Page Should Contain Match | **so???hing** |
    | Page Should Contain Match | **someTHING** | ignore_case=${True} |
    | Page Should Contain Match | **something** | error_message=New error message |</doc>
<tags>
</tags>
</kw>
<kw name="Page Should Contain String">
<arguments>
<arg>txt</arg>
<arg>ignore_case=False</arg>
<arg>error_message=None</arg>
</arguments>
<doc>Search if a given string exists on the mainframe screen.

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True}
and you can edit the raise exception message with error_message.

Example:
    | Page Should Contain String | something |
    | Page Should Contain String | someTHING | ignore_case=${True} |
    | Page Should Contain String | something | error_message=New error message |</doc>
<tags>
</tags>
</kw>
<kw name="Page Should Contain String X Times">
<arguments>
<arg>txt</arg>
<arg>number</arg>
<arg>ignore_case=False</arg>
<arg>error_message=None</arg>
</arguments>
<doc>Search if the entered string appears the desired number of times on the mainframe screen.

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True} and you
can edit the raise exception message with error_message.

Example:
       | Page Should Contain String X Times | something | 3 |
       | Page Should Contain String X Times | someTHING | 3 | ignore_case=${True} |
       | Page Should Contain String X Times | something | 3 | error_message=New error message |</doc>
<tags>
</tags>
</kw>
<kw name="Page Should Match Regex">
<arguments>
<arg>regex_pattern</arg>
</arguments>
<doc>Fails if string does not match pattern as a regular expression. Regular expression check is
implemented using the Python [https://docs.python.org/2/library/re.html|re module]. Python's
regular expression syntax is derived from Perl, and it is thus also very similar to the syntax used,
for example, in Java, Ruby and .NET.

Backslash is an escape character in the test data, and possible backslashes in the pattern must
thus be escaped with another backslash (e.g. \\d\\w+).</doc>
<tags>
</tags>
</kw>
<kw name="Page Should Not Contain All Strings">
<arguments>
<arg>list_string</arg>
<arg>ignore_case=False</arg>
<arg>error_message=None</arg>
</arguments>
<doc>Fails if one of the strings in a given list exists on the mainframe screen. if one of the string
are found, the keyword will raise a exception.

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True}
and you can edit the raise exception message with error_message.

Example:
    | Page Should Not Contain All Strings | ${list_of_string} |
    | Page Should Not Contain All Strings | ${list_of_string} | ignore_case=${True} |
    | Page Should Not Contain All Strings | ${list_of_string} | error_message=New error message |</doc>
<tags>
</tags>
</kw>
<kw name="Page Should Not Contain Any String">
<arguments>
<arg>list_string</arg>
<arg>ignore_case=False</arg>
<arg>error_message=None</arg>
</arguments>
<doc>Fails if one or more of the strings in a given list exists on the mainframe screen. if one or more of the
string are found, the keyword will raise a exception.

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True}
and you can edit the raise exception message with error_message.

Example:
    | Page Should Not Contain Any Strings | ${list_of_string} |
    | Page Should Not Contain Any Strings | ${list_of_string} | ignore_case=${True} |
    | Page Should Not Contain Any Strings | ${list_of_string} | error_message=New error message |</doc>
<tags>
</tags>
</kw>
<kw name="Page Should Not Contain Match">
<arguments>
<arg>txt</arg>
<arg>ignore_case=False</arg>
<arg>error_message=None</arg>
</arguments>
<doc>Fails if the given string matches the given pattern.

Pattern matching is similar as matching files in a shell, and it is always case-sensitive.
In the pattern, * matches to anything and ? matches to any single character.

Note that the entire screen is only considered a string for this keyword, so if you want to search
for the string "something" and it is somewhere other than at the beginning or end of the screen it
should be reported as follows: **something**

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True} and you
can edit the raise exception message with error_message.

Example:
    | Page Should Not Contain Match | **something** |
    | Page Should Not Contain Match | **so???hing** |
    | Page Should Not Contain Match | **someTHING** | ignore_case=${True} |
    | Page Should Not Contain Match | **something** | error_message=New error message |</doc>
<tags>
</tags>
</kw>
<kw name="Page Should Not Contain String">
<arguments>
<arg>txt</arg>
<arg>ignore_case=False</arg>
<arg>error_message=None</arg>
</arguments>
<doc>Search if a given string NOT exists on the mainframe screen.

The search is case sensitive, if you want ignore this you can pass the argument: ignore_case=${True}
and you can edit the raise exception message with error_message.

Example:
    | Page Should Not Contain String | something |
    | Page Should Not Contain String | someTHING | ignore_case=${True} |
    | Page Should Not Contain String | something | error_message=New error message |</doc>
<tags>
</tags>
</kw>
<kw name="Page Should Not Match Regex">
<arguments>
<arg>regex_pattern</arg>
</arguments>
<doc>Fails if string does match pattern as a regular expression. Regular expression check is
implemented using the Python [https://docs.python.org/2/library/re.html|re module]. Python's
regular expression syntax is derived from Perl, and it is thus also very similar to the syntax used,
for example, in Java, Ruby and .NET.

Backslash is an escape character in the test data, and possible backslashes in the pattern must
thus be escaped with another backslash (e.g. \\d\\w+).</doc>
<tags>
</tags>
</kw>
<kw name="Read">
<arguments>
<arg>ypos</arg>
<arg>xpos</arg>
<arg>length</arg>
</arguments>
<doc>Get a string of "length" at screen co-ordinates "ypos"/"xpos".

Co-ordinates are 1 based, as listed in the status area of the terminal.

Example for read a string in the position y=8 / x=10 of a length 15:
    | ${value} | Read | 8 | 10 | 15 |</doc>
<tags>
</tags>
</kw>
<kw name="Send Enter">
<arguments>
</arguments>
<doc>Send a Enter to the screen.</doc>
<tags>
</tags>
</kw>
<kw name="Send PF">
<arguments>
<arg>PF</arg>
</arguments>
<doc>Send a Program Function to the screen.

Example:
       | Send PF | 3 |</doc>
<tags>
</tags>
</kw>
<kw name="Set Screenshot Folder">
<arguments>
<arg>path</arg>
</arguments>
<doc>Set a folder to keep the html files generated by the `Take Screenshot` keyword.

Example:
    | Set Screenshot Folder | C:\\Temp\\Images |</doc>
<tags>
</tags>
</kw>
<kw name="Take Screenshot">
<arguments>
<arg>height=410</arg>
<arg>width=670</arg>
</arguments>
<doc>Generate a screenshot of the IBM 3270 Mainframe in a html format. The
default folder is the log folder of RobotFramework, if you want change see the `Set Screenshot Folder`.

The Screenshot is printed in a iframe log, with the values of height=410 and width=670, you
can change this values passing them from the keyword. 

Examples:
    | Take Screenshot |
    | Take Screenshot | height=500 | width=700 |</doc>
<tags>
</tags>
</kw>
<kw name="Wait Field Detected">
<arguments>
</arguments>
<doc>Wait until the screen is ready, the cursor has been positioned
on a modifiable field, and the keyboard is unlocked.

Sometimes the server will "unlock" the keyboard but the screen
will not yet be ready.  In that case, an attempt to read or write to the
screen will result in a 'E' keyboard status because we tried to read from
a screen that is not yet ready.

Using this method tells the client to wait until a field is
detected and the cursor has been positioned on it.</doc>
<tags>
</tags>
</kw>
<kw name="Wait Until String">
<arguments>
<arg>txt</arg>
<arg>timeout=5</arg>
</arguments>
<doc>Wait until a string exists on the mainframe screen to perform the next step. If the string not appear on
5 seconds the keyword will raise a exception. You can define a different timeout.

Example:
    | Wait Until String | something |
    | Wait Until String | something | timeout=10 |</doc>
<tags>
</tags>
</kw>
<kw name="Write">
<arguments>
<arg>txt</arg>
</arguments>
<doc>Send a string to the screen at the current cursor location *and a Enter.*

Example:
    | Write | something |</doc>
<tags>
</tags>
</kw>
<kw name="Write Bare">
<arguments>
<arg>txt</arg>
</arguments>
<doc>Send only the string to the screen at the current cursor location.

Example:
    | Write Bare | something |</doc>
<tags>
</tags>
</kw>
<kw name="Write Bare In Position">
<arguments>
<arg>txt</arg>
<arg>ypos</arg>
<arg>xpos</arg>
</arguments>
<doc>Send only the string to the screen at screen co-ordinates "ypos"/"xpos".

Co-ordinates are 1 based, as listed in the status area of the
terminal.

Example:
    | Write Bare in Position | something | 9 | 11 |</doc>
<tags>
</tags>
</kw>
<kw name="Write In Position">
<arguments>
<arg>txt</arg>
<arg>ypos</arg>
<arg>xpos</arg>
</arguments>
<doc>Send a string to the screen at screen co-ordinates "ypos"/"xpos" and a Enter.

Co-ordinates are 1 based, as listed in the status area of the
terminal.

Example:
    | Write in Position | something | 9 | 11 |</doc>
<tags>
</tags>
</kw>
</keywordspec>
